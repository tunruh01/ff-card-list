{"version":3,"sources":["components/SetHeader.js","components/Card.js","components/CardList.js","components/Set.js","components/FilterControls.js","components/Results.js","components/WantTradeHeader.js","components/Collection.js","App.js","reportWebVitals.js","index.js"],"names":["SetHeader","className","this","props","setData","opus","Component","Card","card","quantity_rows","displayMode","push","current_playset_amount","current_non_foil_playset_amount","total_amount","quantities","forEach","quantity","index","design_type","src","image","alt","name","serial","CardList","displayed_cards","cards","card_index","length","Set","state","FilterControls","sets","designs","cardData","set","includes","sort","a","b","localeCompare","numeric","unshift","rarities","map","set_name","onClick","updateFilter","filters","rarity","design","Results","sortedAndFilteredCardData","sorted_card_data","filter","i","startsWith","some","item","handleScroll","bind","window","addEventListener","document","documentElement","scrollTop","initialScrollPos","removeEventListener","event","setScrollPos","target","scrollingElement","WantTradeHeader","headerItemClicked","mode","scroll","top","left","behavior","changeDisplay","Collection","setDisplayMode","setState","display_mode","pos","scroll_data","scroll_pos","filter_type","filter_data","indexOf","splice","promo_card_data","ffdecks_data","FFDecksData","collection_data","card_set_data","prevProps","prevState","snapshot","merged_data","merged_card","serial_number","playset_important","substring","row","look_serial","existing_index","findIndex","parseInt","Math","min","console","log","replace","reduce","total","readRemoteFile","complete","results","data","style","height","color","loading","size","smoothscroll","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5258046.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class SetHeader extends Component {\n    render() {\n        return <div className='set-header'>{this.props.setData.opus === 'PR' ? 'Promo Exclusive' : `Opus ${this.props.setData.opus}`}</div>\n    }\n}","import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n    render() {\n        let {card} = this.props;\n        let quantity_rows = [];\n\n        switch(this.props.displayMode)\n        {\n            case 'want':\n                quantity_rows.push(<div key='want' className='card-quantity'>{`Need: ${3 - card.current_playset_amount}`}</div>)\n                break;\n            case 'trade':\n                if (card.current_non_foil_playset_amount < 3)\n                {\n                    quantity_rows.push(<div key='trade' className='card-quantity'>{`Trade Amt: ${card.total_amount - card.current_playset_amount}`}</div>)\n                }\n                card.quantities.forEach((quantity, index) => {\n                    if(quantity.design_type !== 'Regular')\n                    {\n                        if(quantity.quantity > 0) {\n                            quantity_rows.push(<div key={index}\n                                                    className='card-quantity'>{`${quantity.design_type}: ${quantity.quantity}`}</div>)\n                        }\n                    }\n                    else if (quantity.quantity > 3) {\n                        quantity_rows.push(<div key={index} className='card-quantity'>{`${quantity.design_type}: ${quantity.quantity - 3}`}</div>)\n                    }\n                })\n                break;\n            case 'trade-down':\n                quantity_rows.push(<div key='trade' className='card-quantity'>{`Need: ${3 - card.current_non_foil_playset_amount}`}</div>)\n                card.quantities.forEach((quantity, index) => {\n                    if(quantity.design_type !== 'Regular')\n                    {\n                        if(quantity.quantity > 0) {\n                            quantity_rows.push(<div key={index}\n                                                    className='card-quantity'>{`${quantity.design_type}: ${quantity.quantity}`}</div>)\n                        }\n                    }\n                })\n                break;\n            default:\n                break;\n        }\n\n        return <div className='card'>\n            <img src={card.image ? card.image : 'https://upload.wikimedia.org/wikipedia/en/b/b4/Final_Fantasy_CCG.jpg'} alt=''\n             className='card-img'/>\n            <div className='card-data'>\n                <div className='card-name'>{card.name}</div>\n                <div className='card-code'>{card.serial}</div>\n                {/*<div className='card-code'>{`current_playset_amount: ${card.current_playset_amount}`}</div>*/}\n                {/*<div className='card-code'>{`current_non_foil_playset_amount: ${card.current_non_foil_playset_amount}`}</div>*/}\n                {/*<div className='card-code'>{`total_amount: ${card.total_amount}`}</div>*/}\n                {quantity_rows}\n            </div>\n        </div>\n    }\n}","import React, { Component } from \"react\";\nimport Card from './Card'\n\nexport default class CardList extends Component {\n    render() {\n        let displayed_cards = [];\n\n        this.props.setData.cards.forEach((card, card_index) => {\n            //if(card.current_playset_amount < 3) {\n                displayed_cards.push(<Card displayMode={this.props.displayMode} key={card_index} card={card}/>)\n            //}\n        })\n\n        return <div className='card-set'>\n            {displayed_cards.length > 0 && displayed_cards}\n            {displayed_cards.length <= 0 && <div>No Results for Set.</div>}\n        </div>\n    }\n}","import React, { Component } from \"react\";\nimport SetHeader from './SetHeader'\nimport CardList from './CardList'\n\nexport default class Set extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <SetHeader setData={this.props.setData}/>\n            <CardList displayMode={this.props.displayMode} setData={this.props.setData}/>\n        </div>\n    }\n}","import React, { Component } from \"react\";\n\nexport default class FilterControls extends Component {\n    render() {\n        let sets = [];\n        let designs = ['All'];\n        this.props.cardData.forEach(set => {\n            sets.push(set.opus);\n            set.cards.forEach(card => {\n                card.quantities.forEach(quantity => {\n                    if (!designs.includes(quantity.design_type))\n                    {\n                        designs.push(quantity.design_type)\n                    }\n                })\n            })\n        })\n\n        const sortAlphaNum = (a, b) => a.localeCompare(b, 'en', { numeric: true })\n        sets = sets.sort(sortAlphaNum)\n        sets.unshift('All');\n\n        let rarities =  ['All', 'L', 'H', 'R', 'C'];\n\n        if(this.props.displayMode !== 'trade-down')\n        {\n            rarities.push('PR Only');\n        }\n\n        return <div className='filter-options'>\n                <div className='filter-option-desc'>Set:</div>\n                <ul className='filter-option-collection'>\n                    {sets.map(set_name =>\n                        <li onClick={() => this.props.updateFilter('sets', set_name)} className={`filter-option-item ${this.props.filters['sets'].includes(set_name) ? 'selected' : ''}`}  key={set_name}>{set_name}</li>)}\n                </ul>\n                <div className='filter-option-desc'>Rarity</div>\n                <ul className='filter-option-collection'>\n                    {rarities.map(rarity =>\n                        <li onClick={() => this.props.updateFilter('rarities', rarity)} className={`filter-option-item ${this.props.filters['rarities'].includes(rarity) ? 'selected' : ''}`}\n                            key={rarity}>{rarity}</li>)}\n                </ul>\n                {this.props.displayMode !== 'want' && <div className='filter-option-desc'>Design:</div>}\n                {this.props.displayMode !== 'want' &&\n                    <ul className='filter-option-collection'>\n                        {designs.map(design =>\n                            <li onClick={() => this.props.updateFilter('designs', design)} className={`filter-option-item ${this.props.filters['designs'].includes(design) ? 'selected' : ''}`}\n                                key={design}>{design}</li>)}\n                    </ul>}\n            </div>\n    }\n}","import React, { Component } from \"react\";\nimport Set from './Set'\nimport FilterControls from \"./FilterControls\";\n\nexport default class Results extends Component {\n    constructor(props) {\n        super(props);\n        this.handleScroll = this.handleScroll.bind(this)\n    }\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n        document.documentElement.scrollTop = this.props.initialScrollPos;\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll(event) {\n        this.props.setScrollPos(event.target.scrollingElement.scrollTop);\n    }\n\n    sortedAndFilteredCardData = () => {\n        let card_data = [...this.props.cardData]\n        const sortAlphaNum = (a, b) => a.opus.localeCompare(b.opus, 'en', { numeric: true })\n        let sorted_card_data = card_data.sort(sortAlphaNum)\n\n        sorted_card_data = sorted_card_data.map(set => {return {...set}})\n\n        if(this.props.filters['sets']  && !this.props.filters['sets'].includes('All')) {\n            sorted_card_data = sorted_card_data.filter(set => {\n                return this.props.filters['sets'].includes('All') || this.props.filters['sets'].includes(set.opus)\n            })\n        }\n\n        for(let i = 0; i < sorted_card_data.length; i++)\n        {\n            if(this.props.filters['rarities'] && !this.props.filters['rarities'].includes('All')) {\n                sorted_card_data[i].cards = sorted_card_data[i].cards.filter(card => {\n                    let rarity = card.serial.startsWith('PR') ? 'PR Only' : card.serial[card.serial.length - 1];\n\n                    return this.props.filters['rarities'].includes(rarity)\n                })\n            }\n\n            if(this.props.filters['designs'] && !this.props.filters['designs'].includes('All')) {\n                sorted_card_data[i].cards = sorted_card_data[i].cards.filter(card => {\n                    let designs = card.quantities.map(rarity => rarity.quantity > 0 ? rarity.design_type : null)\n                    return designs.some(item => this.props.filters['designs'].includes(item))\n                })\n            }\n\n            sorted_card_data[i].cards = sorted_card_data[i].cards.filter((card) => {\n                switch(this.props.displayMode) {\n                    case 'want':\n                        return card.current_playset_amount < 3;\n                    case 'trade':\n                        return card.current_playset_amount >= 3 && card.total_amount > card.current_playset_amount;\n                    case 'trade-down':\n                        return card.current_playset_amount > card.current_non_foil_playset_amount;\n                    default:\n                        return false;\n                }\n            })\n        }\n\n        return sorted_card_data;\n    }\n\n    render() {\n        return <div>\n            <FilterControls filters={this.props.filters} updateFilter={this.props.updateFilter} displayMode={this.props.displayMode} cardData={this.props.cardData}/>\n            {this.sortedAndFilteredCardData().map((set, index) => set.cards.length > 0 ? <Set displayMode={this.props.displayMode} setData={set} key={index}/> : null)}\n        </div>\n    }\n}","import React, { Component } from \"react\";\n\nexport default class WantTradeHeader extends Component {\n    headerItemClicked = (mode) => {\n        if (mode === this.props.displayMode) {\n            window.scroll({top: 0, left: 0, behavior: 'smooth' })\n        }\n        else {\n            this.props.changeDisplay(mode)\n        }\n    }\n    render() {\n        return <div className='want-trade-header'>\n            <div className={`header-option ${this.props.displayMode === 'want' ? 'selected-header' : ''}`} onClick={() => this.headerItemClicked('want')}>Want</div>\n            <div className={`header-option ${this.props.displayMode === 'trade' ? 'selected-header' : ''}`} onClick={() => this.headerItemClicked('trade')}>Trade</div>\n            <div className={`header-option ${this.props.displayMode === 'trade-down' ? 'selected-header' : ''}`} onClick={() => this.headerItemClicked('trade-down')}>Trade Down</div>\n        </div>\n    }\n}","import React, { Component } from \"react\";\nimport { readRemoteFile } from 'react-papaparse'\nimport FFDecksData from '../test_data/ffdecks';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Results from './Results'\nimport WantTradeHeader from './WantTradeHeader'\n\nexport default class Collection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            promo_card_data: null,\n            ffdecks_data: FFDecksData,\n            collection_data: null,\n            card_set_data: null,\n            display_mode: 'want',\n            scroll_pos: {},\n            filters: {\n                'want': { sets: ['All'], rarities: ['All'] },\n                'trade':  { sets: ['All'], designs: ['All'], rarities: ['L', 'H', 'PR Only'] },\n                'trade-down':  { sets: ['All'], designs: ['All'], rarities: ['L', 'H'] }\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if((prevState.promo_card_data === null ||\n            prevState.ffdecks_data === null ||\n            prevState.collection_data === null) &&\n            this.state.promo_card_data !== null &&\n            this.state.ffdecks_data !== null &&\n            this.state.collection_data !== null)\n        {\n            let merged_data = [];\n            this.state.ffdecks_data.cards.forEach(card => {\n                let merged_card = {};\n                merged_card.name = card.name;\n                merged_card.image = card.image;\n                merged_card.serial = card.serial_number;\n                merged_card.serial += card.rarity !== 'Promo' ? card.rarity[0] : '';\n                merged_card.quantities = [];\n                merged_card.quantities.push({design_type: 'Regular', quantity: 0, playset_important: true})\n                merged_card.current_playset_amount = 0;\n                merged_card.current_non_foil_playset_amount = 0;\n                merged_card.opus = card.serial_number[1] === '-' ? card.serial_number[0] : card.serial_number.substring(0,2);\n                merged_data.push(merged_card);\n            })\n\n            this.state.collection_data.forEach((row, index) => {\n                if(index > 0)\n                {\n                    let look_serial = row[1] + (row[2] !== 'Promo' ? row[2][0] : '');\n                    let existing_index = merged_data.findIndex(item => item.serial === look_serial)\n                    if(existing_index >= 0)\n                    {\n                        merged_data[existing_index].quantities[0].quantity = parseInt(row[3]);\n                        merged_data[existing_index].current_non_foil_playset_amount = Math.min(parseInt(row[3]), 3);\n\n                        merged_data[existing_index].quantities.push({design_type: 'Foil', quantity: parseInt(row[4]), playset_important: false})\n                    }\n                    else {\n                        console.log('missing serial from collection' + look_serial)\n                    }\n                }\n            })\n\n            this.state.promo_card_data.forEach((row, index) => {\n                if(index > 0)\n                {\n                    let look_serial = row[0];\n                    let existing_index = merged_data.findIndex(item => item.serial === look_serial)\n                    if(existing_index >= 0)\n                    {\n                        merged_data[existing_index].quantities.push({design_type: row[3].replace('Full Art', 'FA').replace('Prerelease', 'PreR').replace('Promo', 'PR').replace('Alternate', 'Alt') , quantity: parseInt(row[1]), playset_important: false})\n                    }\n                    else {\n                        console.log('missing serial from promos' + look_serial)\n                        let merged_card = {};\n                        merged_card.name = row[2];\n                        merged_card.serial = row[0];\n                        merged_card.quantities = [];\n                        merged_card.quantities.push({design_type: 'Regular', quantity: 0, playset_important: true})\n                        merged_card.quantities.push({design_type: row[3].replace('Full Art', 'FA').replace('Prerelease', 'PreR').replace('Promo', 'PR').replace('Alternate', 'Alt'), quantity: parseInt(row[1]), playset_important: false})\n                        merged_card.current_playset_amount = 0;\n                        merged_card.current_non_foil_playset_amount = 0;\n                        merged_card.opus = merged_card.serial[1] === '-' ? merged_card.serial[0] : merged_card.serial.substring(0,2);\n                        merged_data.push(merged_card);\n                    }\n                }\n            })\n\n            for(let i = 0; i < merged_data.length; i++)\n            {\n                merged_data[i].total_amount = merged_data[i].quantities.reduce((total, quantity) => total + quantity.quantity, 0)\n                merged_data[i].current_playset_amount = Math.min(3, merged_data[i].total_amount)\n            }\n\n            let card_set_data = []\n\n            merged_data.forEach(card => {\n                let existing_index = card_set_data.findIndex(item => item.opus === card.opus)\n\n                if(existing_index < 0)\n                {\n                    card_set_data.push({opus: card.opus, cards:[]})\n                    existing_index = card_set_data.length - 1;\n                }\n\n                card_set_data[existing_index].cards.push(card)\n            })\n\n            this.setState({card_set_data})\n        }\n    }\n\n    componentDidMount() {\n        readRemoteFile(\n            \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTNKDBLs5ncNghesIYn2C4JlnJ5TZBNUmPZRsjAk9tyVxqoAcTs69QijdIo0Ys3_svdyCXwDlf814J5/pub?output=csv\",\n            {\n                complete: (results) => {\n                    this.setState({promo_card_data: results.data})\n                }\n            }\n        )\n        readRemoteFile(\n            \"https://docs.google.com/spreadsheets/d/e/2PACX-1vS5ZPsow9nzjVX6XP9ru1CRw6913D6RDrszOujy_TerRNWm17jXdf04u38YLscBfTS-35Ix4AUY85dk/pub?output=csv\",\n            {\n                complete: (results) => {\n                    this.setState({collection_data: results.data})\n                }\n            }\n        )\n        // fetch(\"http://ffdecks.com/api/cards/basic\")\n        //     .then(res => res.json())\n        //     .then(res => {\n        //             this.setState({ffdecks_data: res})\n        //             console.log('ffdecks_data_fetched')\n        //         }\n        //     )\n    }\n\n    setDisplayMode = (mode) => {\n        this.setState({display_mode: mode})\n    }\n\n    setScrollPos = (pos) => {\n        let scroll_data = {...this.state.scroll_pos};\n        scroll_data[this.state.display_mode] = pos;\n        this.setState({scroll_pos: scroll_data})\n    }\n\n    updateFilter = (filter_type, filter) => {\n        let filter_data = {...this.state.filters};\n\n        if(filter === 'All' || filter_type === 'sets' || filter_data[this.state.display_mode][filter_type].includes('All'))\n        {\n            filter_data[this.state.display_mode][filter_type] = [];\n            filter_data[this.state.display_mode][filter_type].push(filter);\n        }\n        else if(filter_data[this.state.display_mode][filter_type].includes(filter)) {\n            const index = filter_data[this.state.display_mode][filter_type].indexOf(filter);\n            if (index > -1) {\n                filter_data[this.state.display_mode][filter_type].splice(index, 1);\n            }\n        }\n        else {\n            filter_data[this.state.display_mode][filter_type].push(filter);\n        }\n\n        this.setState({filters: filter_data})\n    }\n\n    render() {\n        if(!!this.state.card_set_data) {\n            return <div style={{height:'100%'}}>\n                <WantTradeHeader changeDisplay={this.setDisplayMode} displayMode={this.state.display_mode}/>\n                {this.state.display_mode === 'want' && <Results filters={this.state.filters['want']} updateFilter={this.updateFilter} setScrollPos={this.setScrollPos} initialScrollPos={this.state.scroll_pos['want']} cardData={this.state.card_set_data} displayMode={this.state.display_mode}/>}\n                {this.state.display_mode === 'trade' && <Results filters={this.state.filters['trade']} updateFilter={this.updateFilter} setScrollPos={this.setScrollPos} initialScrollPos={this.state.scroll_pos['trade']} cardData={this.state.card_set_data} displayMode={this.state.display_mode}/>}\n                {this.state.display_mode === 'trade-down' && <Results filters={this.state.filters['trade-down']} updateFilter={this.updateFilter} setScrollPos={this.setScrollPos} initialScrollPos={this.state.scroll_pos['trade-down']} cardData={this.state.card_set_data} displayMode={this.state.display_mode}/>}\n            </div>\n        }\n        else {\n            return <ClipLoader color={\"black\"} loading={true} size={150} />\n        }\n    }\n}","import './App.css';\nimport Collection from './components/Collection'\nimport * as smoothscroll from \"smoothscroll-polyfill\";\nsmoothscroll.polyfill();\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Collection/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}