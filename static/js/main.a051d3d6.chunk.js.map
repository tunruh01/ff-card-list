{"version":3,"sources":["logo.svg","components/Set.js","components/Results.js","components/CardView.js","App.js","reportWebVitals.js","index.js"],"names":["Set","props","state","displayed_cards","this","setData","cards","forEach","card","card_index","current_playset_amount","push","name","serial","opus","Component","Results","sorted_card_data","card_data","sort","a","b","localeCompare","numeric","map","set","index","CardView","promo_card_data","ffdecks_data","FFDecksData","collection_data","card_set_data","prevProps","prevState","snapshot","merged_data","merged_card","serial_number","rarity","quantities","design_type","quantity","playset_important","current_non_foil_playset_amount","substring","row","look_serial","existing_index","findIndex","item","parseInt","Math","min","console","log","i","length","reduce","total","setState","readRemoteFile","complete","results","data","color","loading","size","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a051d3d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\nexport default class Set extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        let displayed_cards = [];\n\n        this.props.setData.cards.forEach((card, card_index) => {\n            if(card.current_playset_amount < 3) {\n                // card.quantities.forEach((quantity_data, quantity_index) => {\n                //     displayed_cards.push(<div key={`${set_index}-${quantity_index}`}>\n                //         {`${card.name} - ${card.serial} - ${quantity_data.design_type} - ${quantity_data.quantity}`}\n                //     </div>)\n                // })\n                displayed_cards.push(<div key={card_index}>\n                    {`${card.name} - ${card.serial} - need: ${3 - card.current_playset_amount}`}\n                </div>)\n            }\n        })\n\n        return <div>\n            <div>{this.props.setData.opus === 'PR' ? 'Promo Exclusive' : `Opus ${this.props.setData.opus}`}</div>\n            {displayed_cards}\n        </div>\n    }\n}","import React, { Component } from \"react\";\nimport Set from './Set'\n\nexport default class Results extends Component {\n    render() {\n        const sortAlphaNum = (a, b) => a.opus.localeCompare(b.opus, 'en', { numeric: true })\n        const sorted_card_data = this.props.card_data.sort(sortAlphaNum)\n        return <div>{sorted_card_data.map((set, index) => <Set setData={set} key={index}/>)}</div>\n    }\n}","import React, { Component } from \"react\";\nimport { readRemoteFile } from 'react-papaparse'\nimport FFDecksData from '../test_data/ffdecks';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Results from './Results'\n\nexport default class CardView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            promo_card_data: null,\n            ffdecks_data: FFDecksData,\n            collection_data: null,\n            card_set_data: null,\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if((prevState.promo_card_data === null ||\n            prevState.ffdecks_data === null ||\n            prevState.collection_data === null) &&\n            this.state.promo_card_data !== null &&\n            this.state.ffdecks_data !== null &&\n            this.state.collection_data !== null)\n        {\n            let merged_data = [];\n            this.state.ffdecks_data.cards.forEach(card => {\n                let merged_card = {};\n                merged_card.name = card.name;\n                merged_card.serial = card.serial_number;\n                merged_card.serial += card.rarity !== 'Promo' ? card.rarity[0] : '';\n                merged_card.quantities = [];\n                merged_card.quantities.push({design_type: 'Regular', quantity: 0, playset_important: true})\n                merged_card.current_playset_amount = 0;\n                merged_card.current_non_foil_playset_amount = 0;\n                merged_card.opus = card.serial_number[1] === '-' ? card.serial_number[0] : card.serial_number.substring(0,2);\n                merged_data.push(merged_card);\n            })\n\n            // console.log(merged_data);\n\n            this.state.collection_data.forEach((row, index) => {\n                if(index > 0)\n                {\n                    let look_serial = row[1] + (row[2] !== 'Promo' ? row[2][0] : '');\n                    let existing_index = merged_data.findIndex(item => item.serial === look_serial)\n                    if(existing_index >= 0)\n                    {\n                        merged_data[existing_index].quantities[0].quantity = parseInt(row[3]);\n                        merged_data[existing_index].current_non_foil_playset_amount = Math.min(parseInt(row[3]), 3);\n\n                        merged_data[existing_index].quantities.push({design_type: 'Foil', quantity: parseInt(row[4]), playset_important: false})\n                    }\n                    else {\n                        console.log('missing serial from collection' + look_serial)\n                    }\n                }\n            })\n\n            this.state.promo_card_data.forEach((row, index) => {\n                if(index > 0)\n                {\n                    let look_serial = row[0];\n                    let existing_index = merged_data.findIndex(item => item.serial === look_serial)\n                    if(existing_index >= 0)\n                    {\n                        merged_data[existing_index].quantities.push({design_type: row[3], quantity: parseInt(row[1]), playset_important: false})\n                    }\n                    else {\n                        console.log('missing serial from promos' + look_serial)\n                        let merged_card = {};\n                        merged_card.name = row[2];\n                        merged_card.serial = row[0];\n                        merged_card.quantities = [];\n                        merged_card.quantities.push({design_type: 'Regular', quantity: 0, playset_important: true})\n                        merged_card.quantities.push({design_type: row[3], quantity: parseInt(row[1]), playset_important: false})\n                        merged_card.current_playset_amount = 0;\n                        merged_card.current_non_foil_playset_amount = 0;\n                        merged_card.opus = merged_card.serial[1] === '-' ? merged_card.serial[0] : merged_card.serial.substring(0,2);\n                        merged_data.push(merged_card);\n                    }\n                }\n            })\n\n            for(let i = 0; i < merged_data.length; i++)\n            {\n                merged_data[i].current_playset_amount = Math.min(3, merged_data[i].quantities.reduce((total, quantity) => total + quantity.quantity, 0))\n            }\n\n            let card_set_data = []\n\n            merged_data.forEach(card => {\n                let existing_index = card_set_data.findIndex(item => item.opus === card.opus)\n\n                if(existing_index < 0)\n                {\n                    card_set_data.push({opus: card.opus, cards:[]})\n                    existing_index = card_set_data.length - 1;\n                }\n\n                card_set_data[existing_index].cards.push(card)\n            })\n\n            this.setState({card_set_data})\n\n            console.log(card_set_data)\n\n            console.log('all merged up')\n        }\n    }\n\n    componentDidMount() {\n        readRemoteFile(\n            \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTNKDBLs5ncNghesIYn2C4JlnJ5TZBNUmPZRsjAk9tyVxqoAcTs69QijdIo0Ys3_svdyCXwDlf814J5/pub?output=csv\",\n            {\n                complete: (results) => {\n                    this.setState({promo_card_data: results.data})\n                    console.log('promo_data_fetched')\n                }\n            }\n        )\n        readRemoteFile(\n            \"https://docs.google.com/spreadsheets/d/e/2PACX-1vS5ZPsow9nzjVX6XP9ru1CRw6913D6RDrszOujy_TerRNWm17jXdf04u38YLscBfTS-35Ix4AUY85dk/pub?output=csv\",\n            {\n                complete: (results) => {\n                    this.setState({collection_data: results.data})\n                    console.log('collection_data_fetched')\n                }\n            }\n        )\n        // fetch(\"http://ffdecks.com/api/cards/basic\")\n        //     .then(res => res.json())\n        //     .then(res => {\n        //             this.setState({ffdecks_data: res})\n        //             console.log('ffdecks_data_fetched')\n        //         }\n        //     )\n    }\n\n    render() {\n        if(!!this.state.card_set_data) {\n\n\n            return <div>\n                <Results card_data={this.state.card_set_data}/>\n            </div>\n        }\n        else {\n            return <ClipLoader color={\"black\"} loading={true} size={150} />\n        }\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport CardView from './components/CardView'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CardView/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}