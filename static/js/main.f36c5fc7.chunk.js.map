{"version":3,"sources":["components/SetHeader.js","components/Card.js","components/CardList.js","components/Set.js","components/FilterControls.js","components/Results.js","components/WantTradeHeader.js","components/Collection.js","App.js","reportWebVitals.js","index.js"],"names":["SetHeader","className","this","props","setData","opus","Component","Card","card","quantity_rows","displayMode","push","current_playset_amount","current_non_foil_playset_amount","total_amount","quantities","forEach","quantity","index","design_type","src","image","alt","name","serial","CardList","displayed_cards","cards","card_index","length","Set","state","FilterControls","sets","designs","cardData","set","includes","sort","a","b","localeCompare","numeric","unshift","rarities","map","set_name","onClick","updateFilter","filters","rarity","design","Results","sortedAndFilteredCardData","sorted_card_data","filter","i","startsWith","some","item","handleScroll","bind","window","addEventListener","document","documentElement","scrollTop","initialScrollPos","removeEventListener","event","setScrollPos","target","scrollingElement","WantTradeHeader","headerItemClicked","mode","scroll","top","left","behavior","changeDisplay","Collection","setDisplayMode","setState","display_mode","pos","scroll_data","scroll_pos","filter_type","filter_data","indexOf","splice","promo_card_data","ffdecks_data","collection_data","card_set_data","prevProps","prevState","snapshot","merged_data","merged_card","serial_number","playset_important","substring","row","look_serial","existing_index","findIndex","parseInt","Math","min","console","log","replace","reduce","total","readRemoteFile","complete","results","data","fetch","then","res","json","style","height","color","loading","size","smoothscroll","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f36c5fc7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class SetHeader extends Component {\r\n    render() {\r\n        return <div className='set-header'>{this.props.setData.opus === 'PR' ? 'Promo Exclusive' : `Opus ${this.props.setData.opus}`}</div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class Card extends Component {\r\n    render() {\r\n        let {card} = this.props;\r\n        let quantity_rows = [];\r\n\r\n        switch(this.props.displayMode)\r\n        {\r\n            case 'want':\r\n                quantity_rows.push(<div key='want' className='card-quantity'>{`Need: ${3 - card.current_playset_amount}`}</div>)\r\n                break;\r\n            case 'trade':\r\n                if (card.current_non_foil_playset_amount < 3)\r\n                {\r\n                    quantity_rows.push(<div key='trade' className='card-quantity'>{`Trade Amt: ${card.total_amount - card.current_playset_amount}`}</div>)\r\n                }\r\n                quantity_rows.push(<div key='have' className='card-quantity underline'>{`Have`}</div>)\r\n                card.quantities.forEach((quantity, index) => {\r\n                    if(quantity.design_type !== 'Regular')\r\n                    {\r\n                        if(quantity.quantity > 0) {\r\n                            quantity_rows.push(<div key={index}\r\n                                                    className='card-quantity'>{`${quantity.design_type}: ${quantity.quantity}`}</div>)\r\n                        }\r\n                    }\r\n                    else if (quantity.quantity > 3) {\r\n                        quantity_rows.push(<div key={index} className='card-quantity'>{`${quantity.design_type}: ${quantity.quantity - 3}`}</div>)\r\n                    }\r\n                })\r\n                break;\r\n            case 'trade-down':\r\n                quantity_rows.push(<div key='trade' className='card-quantity'><span className='underline'>Need</span>: {`${3 - card.current_non_foil_playset_amount}`}</div>)\r\n                quantity_rows.push(<div key='have' className='card-quantity underline'>{`Have`}</div>)\r\n                card.quantities.forEach((quantity, index) => {\r\n                    if(quantity.design_type !== 'Regular')\r\n                    {\r\n                        if(quantity.quantity > 0) {\r\n                            quantity_rows.push(<div key={index}\r\n                                                    className='card-quantity'>{`${quantity.design_type}: ${quantity.quantity}`}</div>)\r\n                        }\r\n                    }\r\n                })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return <div className='card'>\r\n            <img src={card.image ? card.image : 'https://upload.wikimedia.org/wikipedia/en/b/b4/Final_Fantasy_CCG.jpg'} alt=''\r\n             className='card-img'/>\r\n            <div className='card-data'>\r\n                <div className='card-name'>{card.name}</div>\r\n                <div className='card-code'>{card.serial}</div>\r\n                {/*<div className='card-code'>{`current_playset_amount: ${card.current_playset_amount}`}</div>*/}\r\n                {/*<div className='card-code'>{`current_non_foil_playset_amount: ${card.current_non_foil_playset_amount}`}</div>*/}\r\n                {/*<div className='card-code'>{`total_amount: ${card.total_amount}`}</div>*/}\r\n                {quantity_rows}\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Card from './Card'\r\n\r\nexport default class CardList extends Component {\r\n    render() {\r\n        let displayed_cards = [];\r\n\r\n        this.props.setData.cards.forEach((card, card_index) => {\r\n            //if(card.current_playset_amount < 3) {\r\n                displayed_cards.push(<Card displayMode={this.props.displayMode} key={card_index} card={card}/>)\r\n            //}\r\n        })\r\n\r\n        return <div className='card-set'>\r\n            {displayed_cards.length > 0 && displayed_cards}\r\n            {displayed_cards.length <= 0 && <div>No Results for Set.</div>}\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport SetHeader from './SetHeader'\r\nimport CardList from './CardList'\r\n\r\nexport default class Set extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <SetHeader setData={this.props.setData}/>\r\n            <CardList displayMode={this.props.displayMode} setData={this.props.setData}/>\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class FilterControls extends Component {\r\n    render() {\r\n        let sets = [];\r\n        let designs = ['All'];\r\n        this.props.cardData.forEach(set => {\r\n            sets.push(set.opus);\r\n            set.cards.forEach(card => {\r\n                card.quantities.forEach(quantity => {\r\n                    if(this.props.displayMode !== 'trade-down'\r\n                        || (this.props.displayMode === 'trade-down'\r\n                            && quantity.design_type !== 'Regular')) {\r\n                            if (!designs.includes(quantity.design_type)) {\r\n                                designs.push(quantity.design_type)\r\n                            }\r\n                    }\r\n                })\r\n            })\r\n        })\r\n\r\n        const sortAlphaNum = (a, b) => a.localeCompare(b, 'en', { numeric: true })\r\n        sets = sets.sort(sortAlphaNum)\r\n        sets.unshift('All');\r\n\r\n        let rarities =  ['All', 'L', 'H', 'R', 'C'];\r\n\r\n        if(this.props.displayMode !== 'trade-down')\r\n        {\r\n            rarities.push('PR Only');\r\n        }\r\n\r\n        return <div className='filter-options'>\r\n                <div className='filter-option-desc'>Set:</div>\r\n                <ul className='filter-option-collection'>\r\n                    {sets.map(set_name =>\r\n                        <li onClick={() => this.props.updateFilter('sets', set_name)} className={`filter-option-item ${this.props.filters['sets'].includes(set_name) ? 'selected' : ''}`}  key={set_name}>{set_name}</li>)}\r\n                </ul>\r\n                <div className='filter-option-desc'>Rarity</div>\r\n                <ul className='filter-option-collection'>\r\n                    {rarities.map(rarity =>\r\n                        <li onClick={() => this.props.updateFilter('rarities', rarity)} className={`filter-option-item ${this.props.filters['rarities'].includes(rarity) ? 'selected' : ''}`}\r\n                            key={rarity}>{rarity}</li>)}\r\n                </ul>\r\n                {this.props.displayMode !== 'want' && <div className='filter-option-desc'>Design:</div>}\r\n                {this.props.displayMode !== 'want' &&\r\n                    <ul className='filter-option-collection'>\r\n                        {designs.map(design =>\r\n                            <li onClick={() => this.props.updateFilter('designs', design)} className={`filter-option-item ${this.props.filters['designs'].includes(design) ? 'selected' : ''}`}\r\n                                key={design}>{design}</li>)}\r\n                    </ul>}\r\n            </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Set from './Set'\r\nimport FilterControls from \"./FilterControls\";\r\n\r\nexport default class Results extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n        document.documentElement.scrollTop = this.props.initialScrollPos;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    handleScroll(event) {\r\n        this.props.setScrollPos(event.target.scrollingElement.scrollTop);\r\n    }\r\n\r\n    sortedAndFilteredCardData = () => {\r\n        let card_data = [...this.props.cardData]\r\n        const sortAlphaNum = (a, b) => a.opus.localeCompare(b.opus, 'en', { numeric: true })\r\n        let sorted_card_data = card_data.sort(sortAlphaNum)\r\n\r\n        sorted_card_data = sorted_card_data.map(set => {return {...set}})\r\n\r\n        if(this.props.filters['sets']  && !this.props.filters['sets'].includes('All')) {\r\n            sorted_card_data = sorted_card_data.filter(set => {\r\n                return this.props.filters['sets'].includes('All') || this.props.filters['sets'].includes(set.opus)\r\n            })\r\n        }\r\n\r\n        for(let i = 0; i < sorted_card_data.length; i++)\r\n        {\r\n            if(this.props.filters['rarities'] && !this.props.filters['rarities'].includes('All')) {\r\n                sorted_card_data[i].cards = sorted_card_data[i].cards.filter(card => {\r\n                    let rarity = card.serial.startsWith('PR') ? 'PR Only' : card.serial[card.serial.length - 1];\r\n\r\n                    return this.props.filters['rarities'].includes(rarity)\r\n                })\r\n            }\r\n\r\n            if(this.props.filters['designs'] && !this.props.filters['designs'].includes('All')) {\r\n                sorted_card_data[i].cards = sorted_card_data[i].cards.filter(card => {\r\n                    let designs = card.quantities.map(quantity =>\r\n                        ((quantity.design_type !== 'Regular' && quantity.quantity > 0)\r\n                            || (quantity.design_type === 'Regular' && quantity.quantity > 3)) ? quantity.design_type : null)\r\n                    return designs.some(item => this.props.filters['designs'].includes(item))\r\n                })\r\n            }\r\n\r\n            sorted_card_data[i].cards = sorted_card_data[i].cards.filter((card) => {\r\n                switch(this.props.displayMode) {\r\n                    case 'want':\r\n                        return card.current_playset_amount < 3;\r\n                    case 'trade':\r\n                        return card.current_playset_amount >= 3 && card.total_amount > card.current_playset_amount;\r\n                    case 'trade-down':\r\n                        return card.current_playset_amount > card.current_non_foil_playset_amount;\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        }\r\n\r\n        return sorted_card_data;\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <FilterControls filters={this.props.filters} updateFilter={this.props.updateFilter} displayMode={this.props.displayMode} cardData={this.props.cardData}/>\r\n            {this.sortedAndFilteredCardData().map((set, index) => set.cards.length > 0 ? <Set displayMode={this.props.displayMode} setData={set} key={index}/> : null)}\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class WantTradeHeader extends Component {\r\n    headerItemClicked = (mode) => {\r\n        if (mode === this.props.displayMode) {\r\n            window.scroll({top: 0, left: 0, behavior: 'smooth' })\r\n        }\r\n        else {\r\n            this.props.changeDisplay(mode)\r\n        }\r\n    }\r\n    render() {\r\n        return <div className='want-trade-header'>\r\n            <div className={`header-option ${this.props.displayMode === 'want' ? 'selected-header' : ''}`} onClick={() => this.headerItemClicked('want')}>Want</div>\r\n            <div className={`header-option ${this.props.displayMode === 'trade' ? 'selected-header' : ''}`} onClick={() => this.headerItemClicked('trade')}>Trade</div>\r\n            <div className={`header-option ${this.props.displayMode === 'trade-down' ? 'selected-header' : ''}`} onClick={() => this.headerItemClicked('trade-down')}>Trade Down</div>\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { readRemoteFile } from 'react-papaparse'\r\n//import FFDecksData from '../test_data/ffdecks';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport Results from './Results'\r\nimport WantTradeHeader from './WantTradeHeader'\r\n\r\nexport default class Collection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            promo_card_data: null,\r\n            ffdecks_data: null,\r\n            collection_data: null,\r\n            card_set_data: null,\r\n            display_mode: 'want',\r\n            scroll_pos: {},\r\n            filters: {\r\n                'want': { sets: ['All'], rarities: ['All'] },\r\n                'trade':  { sets: ['All'], designs: ['All'], rarities: ['L', 'H', 'PR Only'] },\r\n                'trade-down':  { sets: ['All'], designs: ['All'], rarities: ['L', 'H'] }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if((prevState.promo_card_data === null ||\r\n            prevState.ffdecks_data === null ||\r\n            prevState.collection_data === null) &&\r\n            this.state.promo_card_data !== null &&\r\n            this.state.ffdecks_data !== null &&\r\n            this.state.collection_data !== null)\r\n        {\r\n            let merged_data = [];\r\n            this.state.ffdecks_data.cards.forEach(card => {\r\n                let merged_card = {};\r\n                merged_card.name = card.name;\r\n                merged_card.image = card.image;\r\n                merged_card.serial = card.serial_number;\r\n                merged_card.serial += card.rarity !== 'Promo' ? card.rarity[0] : '';\r\n                merged_card.quantities = [];\r\n                merged_card.quantities.push({design_type: 'Regular', quantity: 0, playset_important: true})\r\n                merged_card.current_playset_amount = 0;\r\n                merged_card.current_non_foil_playset_amount = 0;\r\n                merged_card.opus = card.serial_number[1] === '-' ? card.serial_number[0] : card.serial_number.substring(0,2);\r\n                merged_data.push(merged_card);\r\n            })\r\n\r\n            this.state.collection_data.forEach((row, index) => {\r\n                if(index > 0)\r\n                {\r\n                    let look_serial = row[1] + (row[2] !== 'Promo' ? row[2][0] : '');\r\n                    let existing_index = merged_data.findIndex(item => item.serial === look_serial)\r\n                    if(existing_index >= 0)\r\n                    {\r\n                        merged_data[existing_index].quantities[0].quantity = parseInt(row[3]);\r\n                        merged_data[existing_index].current_non_foil_playset_amount = Math.min(parseInt(row[3]), 3);\r\n\r\n                        merged_data[existing_index].quantities.push({design_type: 'Foil', quantity: parseInt(row[4]), playset_important: false})\r\n                    }\r\n                    else {\r\n                        console.log('missing serial from collection' + look_serial)\r\n                    }\r\n                }\r\n            })\r\n\r\n            this.state.promo_card_data.forEach((row, index) => {\r\n                if(index > 0)\r\n                {\r\n                    let look_serial = row[0];\r\n                    let existing_index = merged_data.findIndex(item => item.serial === look_serial)\r\n                    if(existing_index >= 0)\r\n                    {\r\n                        merged_data[existing_index].quantities.push({design_type: row[3].replace('Full Art', 'FA').replace('Prerelease', 'PreR').replace('Promo', 'PR').replace('Alternate', 'Alt') , quantity: parseInt(row[1]), playset_important: false})\r\n                    }\r\n                    else {\r\n                        console.log('missing serial from promos' + look_serial)\r\n                        let merged_card = {};\r\n                        merged_card.name = row[2];\r\n                        merged_card.serial = row[0];\r\n                        merged_card.quantities = [];\r\n                        merged_card.quantities.push({design_type: 'Regular', quantity: 0, playset_important: true})\r\n                        merged_card.quantities.push({design_type: row[3].replace('Full Art', 'FA').replace('Prerelease', 'PreR').replace('Promo', 'PR').replace('Alternate', 'Alt'), quantity: parseInt(row[1]), playset_important: false})\r\n                        merged_card.current_playset_amount = 0;\r\n                        merged_card.current_non_foil_playset_amount = 0;\r\n                        merged_card.opus = merged_card.serial[1] === '-' ? merged_card.serial[0] : merged_card.serial.substring(0,2);\r\n                        merged_data.push(merged_card);\r\n                    }\r\n                }\r\n            })\r\n\r\n            for(let i = 0; i < merged_data.length; i++)\r\n            {\r\n                merged_data[i].total_amount = merged_data[i].quantities.reduce((total, quantity) => total + quantity.quantity, 0)\r\n                merged_data[i].current_playset_amount = Math.min(3, merged_data[i].total_amount)\r\n            }\r\n\r\n            let card_set_data = []\r\n\r\n            merged_data.forEach(card => {\r\n                let existing_index = card_set_data.findIndex(item => item.opus === card.opus)\r\n\r\n                if(existing_index < 0)\r\n                {\r\n                    card_set_data.push({opus: card.opus, cards:[]})\r\n                    existing_index = card_set_data.length - 1;\r\n                }\r\n\r\n                card_set_data[existing_index].cards.push(card)\r\n            })\r\n\r\n            this.setState({card_set_data})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        readRemoteFile(\r\n            \"https://docs.google.com/spreadsheets/d/e/2PACX-1vTNKDBLs5ncNghesIYn2C4JlnJ5TZBNUmPZRsjAk9tyVxqoAcTs69QijdIo0Ys3_svdyCXwDlf814J5/pub?output=csv\",\r\n            {\r\n                complete: (results) => {\r\n                    this.setState({promo_card_data: results.data})\r\n                }\r\n            }\r\n        )\r\n        readRemoteFile(\r\n            \"https://docs.google.com/spreadsheets/d/e/2PACX-1vQyqsRmAvUeC9CXLXgZCyFTQBtGt6g6qq94q7USpcS8PeP7Z0o9iA3j5DoYqkFG6YGYMpv6_VqNtALC/pub?output=csv\",\r\n            {\r\n                complete: (results) => {\r\n                    this.setState({collection_data: results.data})\r\n                }\r\n            }\r\n        )\r\n        fetch(\"https://ffdecks.com/api/cards/basic\")\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                    this.setState({ffdecks_data: res})\r\n                    console.log('ffdecks_data_fetched')\r\n                }\r\n            )\r\n    }\r\n\r\n    setDisplayMode = (mode) => {\r\n        this.setState({display_mode: mode})\r\n    }\r\n\r\n    setScrollPos = (pos) => {\r\n        let scroll_data = {...this.state.scroll_pos};\r\n        scroll_data[this.state.display_mode] = pos;\r\n        this.setState({scroll_pos: scroll_data})\r\n    }\r\n\r\n    updateFilter = (filter_type, filter) => {\r\n        let filter_data = {...this.state.filters};\r\n\r\n        if(filter === 'All' || filter_type === 'sets' || filter_data[this.state.display_mode][filter_type].includes('All'))\r\n        {\r\n            filter_data[this.state.display_mode][filter_type] = [];\r\n            filter_data[this.state.display_mode][filter_type].push(filter);\r\n        }\r\n        else if(filter_data[this.state.display_mode][filter_type].includes(filter)) {\r\n            const index = filter_data[this.state.display_mode][filter_type].indexOf(filter);\r\n            if (index > -1) {\r\n                filter_data[this.state.display_mode][filter_type].splice(index, 1);\r\n            }\r\n        }\r\n        else {\r\n            filter_data[this.state.display_mode][filter_type].push(filter);\r\n        }\r\n\r\n        this.setState({filters: filter_data})\r\n    }\r\n\r\n    render() {\r\n        if(!!this.state.card_set_data) {\r\n            return <div style={{height:'100%'}}>\r\n                <WantTradeHeader changeDisplay={this.setDisplayMode} displayMode={this.state.display_mode}/>\r\n                {this.state.display_mode === 'want' && <Results filters={this.state.filters['want']} updateFilter={this.updateFilter} setScrollPos={this.setScrollPos} initialScrollPos={this.state.scroll_pos['want']} cardData={this.state.card_set_data} displayMode={this.state.display_mode}/>}\r\n                {this.state.display_mode === 'trade' && <Results filters={this.state.filters['trade']} updateFilter={this.updateFilter} setScrollPos={this.setScrollPos} initialScrollPos={this.state.scroll_pos['trade']} cardData={this.state.card_set_data} displayMode={this.state.display_mode}/>}\r\n                {this.state.display_mode === 'trade-down' && <Results filters={this.state.filters['trade-down']} updateFilter={this.updateFilter} setScrollPos={this.setScrollPos} initialScrollPos={this.state.scroll_pos['trade-down']} cardData={this.state.card_set_data.filter(set => set.opus !== 'PR')} displayMode={this.state.display_mode}/>}\r\n            </div>\r\n        }\r\n        else {\r\n            return <ClipLoader color={\"black\"} loading={true} size={150} />\r\n        }\r\n    }\r\n}","import './App.css';\r\nimport Collection from './components/Collection'\r\nimport * as smoothscroll from \"smoothscroll-polyfill\";\r\nsmoothscroll.polyfill();\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Collection/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}